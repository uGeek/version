#!/bin/bash

URL_SERVIDOR="http://192.168.1.100"
RUTA_RAIZ_LOCAL="/wd"
RUTA_RAIZ_SERVIDOR="/dav"
RUTA_VERSION_APP_LOCAL="/wd/apps/version/index.html"
NAVEGADOR="brave"

extraer_nombre_extension() {
    local archivo="$1"
    local base
    base=$(basename "$archivo")
    if [[ "$base" == *.* ]]; then
        echo "${base%.*}" "${base##*.}"
    else
        echo "$base" ""
    fi
}

restaurar_version() {
    local archivo_original="$1"
    local nombre extension
    read nombre extension < <(extraer_nombre_extension "$archivo_original")

    local dir_actual
    dir_actual=$(dirname "$archivo_original")
    local backup_dir="./.backup"
    local lista_backup=()
    local lista_actual=()

    if [ -d "$backup_dir" ]; then
        shopt -s nullglob
        for f in "$backup_dir"/"$nombre"-v*; do
            [ -f "$f" ] || continue
            base=$(basename "$f")
            if [[ "$base" =~ ^$nombre-v([0-9]+) ]]; then
                num="${BASH_REMATCH[1]}"
                md="$dir_actual/$nombre.md"
                msg=""
                [ -f "$md" ] && msg=$(grep "^$num:" "$md" | sed -E "s/^$num:[[:space:]]*//")
                lista_backup+=( "$num|$f|backup|$msg" )
            fi
        done
        shopt -u nullglob
    fi

    shopt -s nullglob
    for f in "$dir_actual"/"$nombre"-v*; do
        [ -f "$f" ] || continue
        base=$(basename "$f")
        if [[ "$base" =~ ^$nombre-v([0-9]+) ]]; then
            num="${BASH_REMATCH[1]}"
            md="$dir_actual/$nombre.md"
            msg=""
            [ -f "$md" ] && msg=$(grep "^$num:" "$md" | sed -E "s/^$num:[[:space:]]*//")
            lista_actual+=( "$num|$f|actual|$msg" )
        fi
    done
    shopt -u nullglob

    ordenada_backup=$(printf '%s\n' "${lista_backup[@]}" | sort -t'|' -k1,1n)
    ordenada_actual=$(printf '%s\n' "${lista_actual[@]}")

    total=$(printf '%s\n' "$ordenada_backup" "$ordenada_actual")

    sel=$(printf '%s\n' "$total" | awk -F'|' '{ printf "%s  —  v%s (%s)  —  %s\n", $2, $1, $3, $4 }' | fzf --tac --prompt="Seleccione versión > ")
    [ -z "$sel" ] && { echo "Restauración cancelada."; exit 0; }

    elegido="${sel%%[[:space:]]*}"
    cp "$elegido" "./$(basename "$archivo_original")"
    echo "Restaurado: $elegido → ./$archivo_original"
    exit 0
}

mostrar_ayuda() {
    cat <<EOF
Uso del script 'version':

  Creación de nueva versión:
    ./version archivo.txt

  Restauración:
    ./version r archivo.txt

  Backup de versiones:
    ./version b

  Descarga de scripts desde HTML:
    ./version scripts

  Mostrar historial:
    ./version cat archivo.txt

  Editar historial:
    ./version e archivo.txt

  Mostrar URL HTML del archivo:
    ./version html archivo.html

  Ayuda:
    ./version h
EOF
    exit 0
}

if [ -z "$1" ]; then
    echo "Uso: ./version [opción] [archivo]"
    echo "Para ayuda: ./version h"
    exit 1
fi

opcion="$1"

case "$opcion" in
    h)
        mostrar_ayuda
        ;;

    html)
        [ -z "$2" ] && { echo "Uso: ./version html archivo.html"; exit 1; }
        archivo="$2"
        [ -f "$archivo" ] || { echo "No existe: $archivo"; exit 1; }
        ruta_abs=$(realpath "$archivo")
        ruta_rel_local="${ruta_abs#$RUTA_RAIZ_LOCAL}"
        [[ "$ruta_rel_local" != /* ]] && ruta_rel_local="/$ruta_rel_local"
        ruta_servidor_archivo="${RUTA_RAIZ_SERVIDOR}${ruta_rel_local}"
        ver_rel="${RUTA_VERSION_APP_LOCAL#$RUTA_RAIZ_LOCAL}"
        [[ "$ver_rel" != /* ]] && ver_rel="/$ver_rel"
        ruta_servidor_app="${RUTA_RAIZ_SERVIDOR}${ver_rel}"
        url="${URL_SERVIDOR}${ruta_servidor_app}?archivo=${ruta_servidor_archivo}"
        echo -e "\033]8;;${url}\033\\${url}\033]8;;\033\\"
        "$NAVEGADOR" "$url" &
        exit 0
        ;;

    scripts)
        echo "Buscando archivos HTML en el directorio actual..."
        mapfile -t html_files < <(printf '%s\n' ./*.html)
        [ ${#html_files[@]} -eq 0 ] && { echo "No hay .html aquí."; exit 0; }
        urls=()
        regex='https?://[^"'\'' >]+\.(js|css)(\?[^"'\'' >]+)?'
        for f in "${html_files[@]}"; do
            while read -r u; do urls+=("$u"); done < <(grep -Eo "$regex" "$f" | sort -u)
        done
        mapfile -t urls < <(printf '%s\n' "${urls[@]}" | sort -u)
        [ ${#urls[@]} -eq 0 ] && { echo "No .js/.css hallados."; exit 0; }
        echo "Descargando ${#urls[@]} archivos..."
        for u in "${urls[@]}"; do
            wget "$u"
        done
        exit 0
        ;;

    b)
        directorio_actual="."
        backup_dir="$directorio_actual/.backup"
        [ ! -d "$backup_dir" ] && mkdir "$backup_dir" && echo "Se ha creado el directorio de backup: $backup_dir"
        declare -A max_version
        for archivo in "$directorio_actual"/*-v*; do
            [ -f "$archivo" ] || continue
            archivo_base=$(basename "$archivo")
            if [[ "$archivo_base" =~ ^(.*)-v([0-9]+)(\..*)?$ ]]; then
                prefijo="${BASH_REMATCH[1]}"
                num_version="${BASH_REMATCH[2]}"
                if [[ -z "${max_version[$prefijo]}" ]] || (( num_version > max_version[$prefijo] )); then
                    max_version["$prefijo"]="$num_version"
                fi
            fi
        done
        echo "Iniciando backup de versiones:"
        for archivo in "$directorio_actual"/*-v*; do
            [ -f "$archivo" ] || continue
            archivo_base=$(basename "$archivo")
            if [[ "$archivo_base" =~ ^(.*)-v([0-9]+)(\..*)?$ ]]; then
                prefijo="${BASH_REMATCH[1]}"
                num_version="${BASH_REMATCH[2]}"
                max_ver="${max_version[$prefijo]}"
                if (( num_version < max_ver )); then
                    mv "$archivo" "$backup_dir/" && echo "Se ha movido: $archivo"
                fi
            fi
        done
        exit 0
        ;;

    r)
        [ -z "$2" ] && { echo "Uso: ./version r archivo"; exit 1; }
        [ -f "$2" ] || { echo "No existe: $2"; exit 1; }
        restaurar_version "$2"
        ;;

    cat)
        [ -z "$2" ] && { echo "Uso: ./version cat archivo"; exit 1; }
        read nombre ext < <(extraer_nombre_extension "$2")
        md="$(dirname "$2")/$nombre.md"
        [ -f "$md" ] || { echo "No existe: $md"; exit 1; }
        cat "$md"
        exit 0
        ;;

    e)
        [ -z "$2" ] && { echo "Uso: ./version e archivo"; exit 1; }
        read nombre ext < <(extraer_nombre_extension "$2")
        md="$(dirname "$2")/$nombre.md"
        [ -f "$md" ] || { echo "No existe: $md"; exit 1; }
        nano "$md"
        exit 0
        ;;

    *)
        archivo="$1"
        [ -f "$archivo" ] || { echo "No existe: $archivo"; exit 1; }
        read nombre ext < <(extraer_nombre_extension "$archivo")
        maxv=0
        shopt -s nullglob
        for f in "$(dirname "$archivo")"/"$nombre"-v*; do
            base=$(basename "$f")
            if [[ "$base" =~ ^$nombre-v([0-9]+) ]]; then
                (( BASH_REMATCH[1] > maxv )) && maxv=${BASH_REMATCH[1]}
            fi
        done
        shopt -u nullglob
        nueva=$((maxv+1))
        nuevo="$(dirname "$archivo")/$nombre-v$nueva"
        [ -n "$ext" ] && nuevo+=".$ext"
        cp "$archivo" "$nuevo"
        echo "Nueva versión: $nuevo"
        echo -n "Mensaje: "
        read -r msg
        fecha=$(date "+%Y-%m-%d %H:%M")
        autor=$(whoami)
        md="$(dirname "$archivo")/$nombre.md"
        entry="$nueva: $msg — Fecha: $fecha — Autor: $autor"
        echo "$entry" >> "$md"
        echo "Historial actualizado: $md"
        exit 0
        ;;
esac
